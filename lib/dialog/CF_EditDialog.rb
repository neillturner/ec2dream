
require 'rubygems'
require 'fox16'
require 'common/EC2_Properties'
require 'common/error_message'
require 'common/edit'
require 'dialog/CF_ValidateDialog'
require 'dialog/CF_ViewChangeSetDialog'


include Fox

class CF_EditDialog < FXDialogBox

  def initialize(owner, curr_item=nil)
    puts "CF_EditDialog.initialize"
    @saved = false
    @ec2_main = owner
    @magnifier = @ec2_main.makeIcon("magnifier.png")
    @magnifier.create
    @script_edit = @ec2_main.makeIcon("script_edit.png")
    @script_edit.create
    super(@ec2_main, "Update Stack using Change Set", :opts => DECOR_ALL, :width => 600, :height => 350)
    page1 = FXVerticalFrame.new(self, LAYOUT_FILL, :padding => 0)
    frame1 = FXMatrix.new(page1, 3, :opts => MATRIX_BY_COLUMNS|LAYOUT_FILL)
    stack_name_label = FXLabel.new(frame1, "Stack Name" )
    stack_name_label.tipText = "REQUIRED: The name that is associated with the cloudformation stack.\n The name must be unique in the region in which you are creating the stack.\n It can contain only alphanumeric characters (case sensitive) and hyphens.\n It must start with an alphabetic character and cannot be longer than 255 characters."
    stack_name = FXTextField.new(frame1, 40, nil, 0, :opts => FRAME_SUNKEN|LAYOUT_LEFT)
    FXLabel.new(frame1, "" )
    change_set_name_label = FXLabel.new(frame1, "ChangeSet Name" )
    change_set_name_label.tipText = "REQUIRED: The change set name to create or execute.\n A change set name can contain only alphanumeric, case sensitive characters and hyphens.\n It must start with an alphabetic character and cannot exceed 128 characters."
    change_set_name = FXTextField.new(frame1, 40, nil, 0, :opts => FRAME_SUNKEN|LAYOUT_LEFT)
    FXLabel.new(frame1, "" )
    cfndsl_file_label = FXLabel.new(frame1, "cfndsl File" )
    cfndsl_file_label.tipText = "OPTIONAL: The name of the cfndsl ruby file.\n This allows you to write in ruby and generate the cloudformation JSON template by pressing the cfndsl button."
    frame1b = FXHorizontalFrame.new(frame1,LAYOUT_FILL_X, :padding => 0)
    cfndsl_file = FXTextField.new(frame1b, 60, nil, 0, :opts => FRAME_SUNKEN|LAYOUT_LEFT)
    cfndsl_file_button = FXButton.new(frame1b, "", :opts => BUTTON_TOOLBAR)
    cfndsl_file_button.icon = @magnifier
    cfndsl_file_button.tipText = "Browse..."
    cfndsl_file_button.connect(SEL_COMMAND) do
      dialog = FXFileDialog.new(frame1b, "Select cfndsl file")
      dialog.patternList = [
        "cfndsl Files (*.*)"
      ]
      dialog.selectMode = SELECTFILE_EXISTING
      if dialog.execute != 0
        cfndsl_file.text = dialog.filename
      end
    end
    cfndsl_edit_button = FXButton.new(frame1b, "", :opts => BUTTON_TOOLBAR)
    cfndsl_edit_button.icon = @script_edit
    cfndsl_edit_button.tipText = "Edit cfndsl..."
    cfndsl_edit_button.connect(SEL_COMMAND) do |sender, sel, data|
      edit(cfndsl_file.text)
    end
    FXLabel.new(frame1, "" )
    cfndsl_parameters_label = FXLabel.new(frame1, "cfndsl Parameters" )
    cfndsl_parameters_label.tipText = "OPTIONAL: The cfndsl command line options.\nFor example: -y <filename.yml> allows you specify a yaml file containing variable values."
    cfndsl_parameters = FXTextField.new(frame1, 60, nil, 0, :opts => FRAME_SUNKEN|LAYOUT_LEFT)
    FXLabel.new(frame1, "" )
    pretty_print_json_label = FXLabel.new(frame1, "Pretty Print JSON" )
    pretty_print_json_label.tipText = "Printy Print the generated Cloudformation JSON.\n This makes it more readable by putting it on multiple lines"
    pretty_print_json = FXComboBox.new(frame1, 15, :opts => COMBOBOX_STATIC|COMBOBOX_NO_REPLACE|LAYOUT_LEFT)
    pretty_print_json.numVisible = 2
    pretty_print_json.appendItem("true")
    pretty_print_json.appendItem("false")
    pretty_print_json.setCurrentItem(0)
    FXLabel.new(frame1, "" )

    template_file_label = FXLabel.new(frame1, "Template File" )
    template_file_label.tipText = "REQUIRED: The name of the Cloud Formation template file.\nThis can be generated by cfndsl or created directly in an editor"
    frame1a = FXHorizontalFrame.new(frame1,LAYOUT_FILL_X, :padding => 0)
    template_file = FXTextField.new(frame1a, 60, nil, 0, :opts => FRAME_SUNKEN|LAYOUT_LEFT)
    template_file_button = FXButton.new(frame1a, "", :opts => BUTTON_TOOLBAR)
    template_file_button.icon = @magnifier
    template_file_button.tipText = "Browse..."
    template_file_button.connect(SEL_COMMAND) do
      dialog = FXFileDialog.new(frame1a, "Select template file")
      dialog.patternList = [
        "Template Files (*.*)"
      ]
      dialog.selectMode = SELECTFILE_EXISTING
      if dialog.execute != 0
        template_file.text = dialog.filename
      end
    end
    template_edit_button = FXButton.new(frame1a, "", :opts => BUTTON_TOOLBAR)
    template_edit_button.icon = @script_edit
    template_edit_button.tipText = "Edit Template..."
    template_edit_button.connect(SEL_COMMAND) do |sender, sel, data|
      edit(template_file.text)
    end
    FXLabel.new(frame1, "" )
    parameters_label = FXLabel.new(frame1, "Parameters" )
    parameters_label.tipText = "OPTIONAL: A list of Parameters that specify input parameters for the cloudformtion stack.\nComma (or parameter separator char) separated list of keyword=value. For example KeyPairName=MyKey,InstanceType=t2.micro"
    parameters = FXTextField.new(frame1, 60, nil, 0, :opts => FRAME_SUNKEN|LAYOUT_LEFT)
    FXLabel.new(frame1, "" )
    parameter_separator_label = FXLabel.new(frame1, "Parameter Separator" )
    parameter_separator_label.tipText = "OPTIONAL: Single Character used as separator between parameters, defaults to \",\"."
    parameter_separator = FXTextField.new(frame1, 5, nil, 0, :opts => FRAME_SUNKEN|LAYOUT_LEFT)
    FXLabel.new(frame1, "" )
    disable_rollback_label = FXLabel.new(frame1, "Disable Rollback" )
    disable_rollback_label.tipText = "OPTIONAL: true or false. Controls rollback on stack creation failure, defaults to false."
    disable_rollback = FXTextField.new(frame1, 40, nil, 0, :opts => FRAME_SUNKEN|LAYOUT_LEFT)
    FXLabel.new(frame1, "" )
    timeout_in_minutes_label = FXLabel.new(frame1, "Timeout in Minutes" )
    timeout_in_minutes_label.tipText = "OPTIONAL: The amount of time in minutes that can pass before the stack status becomes CREATE_FAILED. \nif DisableRollback is not set or is set to false, the stack will be rolled back."
    timeout_in_minutes = FXTextField.new(frame1, 40, nil, 0, :opts => FRAME_SUNKEN|LAYOUT_LEFT)
    FXLabel.new(frame1, "" )
    FXLabel.new(frame1, "" )
    FXLabel.new(frame1, "" )
    FXLabel.new(frame1, "" )
    FXLabel.new(frame1, "" )
    frame2 = FXHorizontalFrame.new(page1,LAYOUT_LEFT, hSpacing: 20) # :padding => 0)
    save = FXButton.new(frame2, "   &Save   ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    save.connect(SEL_COMMAND) do |sender, sel, data|
      if stack_name.text == nil or stack_name.text == ""
        error_message("Error","Stack Name not specified")
      else
        save_stack(stack_name.text,change_set_name.text,cfndsl_file.text,cfndsl_parameters.text,pretty_print_json,template_file.text,parameters.text,parameter_separator.text,disable_rollback.text,timeout_in_minutes.text)
      end
    end
    cfndsl = FXButton.new(frame2, "   &cfndsl   ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    cfndsl.connect(SEL_COMMAND) do |sender, sel, data|
      if template_file.text == nil or template_file.text == ""
        error_message("Error","Template File not specified")
      elsif cfndsl_file.text == nil or cfndsl_file.text == ""
        error_message("Error","cfndsl File not specified")
      else
        save_stack(stack_name.text,change_set_name.text,cfndsl_file.text,cfndsl_parameters.text,pretty_print_json,template_file.text,parameters.text,parameter_separator.text,disable_rollback.text,timeout_in_minutes.text)
        if @saved == true
          cfndsl_run(cfndsl_file.text,cfndsl_parameters.text,template_file.text,pretty_print_json)
        end
      end
    end
    validate = FXButton.new(frame2, "   &Validate Template   ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    validate.connect(SEL_COMMAND) do |sender, sel, data|
      if stack_name.text == nil or stack_name.text == ""
        error_message("Error","Stack Name not specified")
      else
        save_stack(stack_name.text,change_set_name.text,cfndsl_file.text,cfndsl_parameters.text,pretty_print_json,template_file.text,parameters.text,parameter_separator.text,disable_rollback.text,timeout_in_minutes.text)
        if @saved == true
          dialog = CF_ValidateDialog.new(@ec2_main,stack_name.text,template_file.text)
        end
      end
    end
    create = FXButton.new(frame2, "   &Create Stack   ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    create.connect(SEL_COMMAND) do |sender, sel, data|
      if stack_name.text == nil or stack_name.text == ""
        error_message("Error","Stack Name not specified")
      else
        save_stack(stack_name.text,change_set_name.text,cfndsl_file.text,cfndsl_parameters.text,pretty_print_json,template_file.text,parameters.text,parameter_separator.text,disable_rollback.text,timeout_in_minutes.text)
        if @saved == true
          answer = FXMessageBox.question(@ec2_main,MBOX_YES_NO,"Confirm Stack Create","Confirm Create of Stack #{stack_name}")
          if answer == MBOX_CLICKED_YES
            doc = File.open(template_file.text, 'rb') { |file| file.read }
            options = {}
            options['TemplateBody'] = doc
            if parameters.text != nil and parameters.text != ""
              begin
                h = {}
                split_char = ','
                split_char = parameter_separator.text if parameter_separator.text != nil and parameter_separator.text != ""
                (parameters.text).split(split_char).each do |x|
                  k,v = x.split('=')
                  h[k] = v
                end
                options['Parameters'] = h
              rescue
                puts "ERROR: bad parameters on Create stack ignored"
              end
            end
            if disable_rollback.text != nil and disable_rollback.text != ""
              options['DisableRollback'] =  true if (disable_rollback.text).downcase == "true"
              options['DisableRollback'] =  false if (disable_rollback.text).downcase == "false"
            end
            if timeout_in_minutes.text != nil and timeout_in_minutes.text != ""
              options['TimeoutInMinutes'] = (timeout_in_minutes.text).to_i
            end
            options['Capabilities'] = ['CAPABILITY_IAM']
            cf = @ec2_main.environment.cf_connection
            if cf != nil
              begin
                puts "Create Stack #{stack_name.text} parameters #{options['Parameters']} disable_rollback #{options['DisableRollback']} timeout_in_minutes #{options['TimeoutInMinutes']}"
                response = cf.create_stack(stack_name.text, options)
                @saved = true
                @ec2_main.list.load('Stack Events','CloudFormation')
                self.handle(sender, MKUINT(ID_ACCEPT, SEL_COMMAND), nil)
              rescue
                error_message("Stack Update failed",$!)
              end
            end
          end
        end
      end
    end
    update = FXButton.new(frame2, "   &Update Stack   ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    update.connect(SEL_COMMAND) do |sender, sel, data|
      if stack_name.text == nil or stack_name.text == ""
        error_message("Error","Stack Name not specified")
      else
        save_stack(stack_name.text,change_set_name.text,cfndsl_file.text,cfndsl_parameters.text,pretty_print_json,template_file.text,parameters.text,parameter_separator.text,disable_rollback.text,timeout_in_minutes.text)
        if @saved == true
          answer = FXMessageBox.question(@ec2_main,MBOX_YES_NO,"Confirm Stack Update","Confirm Update of Stack #{stack_name}")
          if answer == MBOX_CLICKED_YES
            doc = File.open(template_file.text, 'rb') { |file| file.read }
            options = {}
            options['TemplateBody'] = doc
            if parameters.text != nil and parameters.text != ""
              begin
                h = {}
                split_char = ','
                split_char = parameter_separator.text if parameter_separator.text != nil and parameter_separator.text != ""
                (parameters.text).split(split_char).each do |x|
                  k,v = x.split('=')
                  h[k] = v
                end
                options['Parameters'] = h
              rescue
                puts "ERROR: bad parameters on Create stack ignored"
              end
            end
            if disable_rollback.text != nil and disable_rollback.text != ""
              options['DisableRollback'] =  true if (disable_rollback.text).downcase == "true"
              options['DisableRollback'] =  false if (disable_rollback.text).downcase == "false"
            end
            if timeout_in_minutes.text != nil and timeout_in_minutes.text != ""
              options['TimeoutInMinutes'] = (timeout_in_minutes.text).to_i
            end
            options['Capabilities'] = ['CAPABILITY_IAM']
            cf = @ec2_main.environment.cf_connection
            if cf != nil
              begin
                puts "Update Stack #{stack_name.text} parameters #{options['Parameters']} disable_rollback #{options['DisableRollback']} timeout_in_minutes #{options['TimeoutInMinutes']}"
                response = cf.update_stack(stack_name.text, options)
                @saved = true
                self.handle(sender, MKUINT(ID_ACCEPT, SEL_COMMAND), nil)
              rescue
                error_message("Stack Creation failed",$!)
              end
            end
          end
        end
      end
    end
    frame3 = FXHorizontalFrame.new(page1,LAYOUT_LEFT, hSpacing: 20) # :padding => 0)
    create_changeset = FXButton.new(frame3, " &Create Change Set ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    create_changeset.connect(SEL_COMMAND) do |sender, sel, data|
      if stack_name.text == nil or stack_name.text == ""
        error_message("Error","Stack Name not specified")
      elsif change_set_name.text == nil or change_set_name.text == ""
        error_message("Error","Change Set Name not specified")
      else
        save_stack(stack_name.text,change_set_name.text,cfndsl_file.text,cfndsl_parameters.text,pretty_print_json,template_file.text,parameters.text,parameter_separator.text,disable_rollback.text,timeout_in_minutes.text)
        if @saved == true
          answer = FXMessageBox.question(@ec2_main,MBOX_YES_NO,"Confirm Create ChangeSet","Confirm Create ChangeSet #{change_set_name}")
          if answer == MBOX_CLICKED_YES
            doc = File.open(template_file.text, 'rb') { |file| file.read }
            options = {}
            options['TemplateBody'] = doc
            if parameters.text != nil and parameters.text != ""
              begin
                h = {}
                split_char = ','
                split_char = parameter_separator.text if parameter_separator.text != nil and parameter_separator.text != ""
                (parameters.text).split(split_char).each do |x|
                  k,v = x.split('=')
                  h[k] = v
                end
                options['Parameters'] = h
              rescue
                puts "ERROR: bad parameters on Create Change Set stack ignored"
              end
            end
            if disable_rollback.text != nil and disable_rollback.text != ""
              options['DisableRollback'] =  true if (disable_rollback.text).downcase == "true"
              options['DisableRollback'] =  false if (disable_rollback.text).downcase == "false"
            end
            if timeout_in_minutes.text != nil and timeout_in_minutes.text != ""
              options['TimeoutInMinutes'] = (timeout_in_minutes.text).to_i
            end
            options['ChangeSetName']= change_set_name.text
            cf = @ec2_main.environment.cf_connection
            if cf != nil
              begin
                puts "Create ChangeSet for Stack #{stack_name.text} change_set_name #{options['ChangeSetName']} parameters #{options['Parameters']} disable_rollback #{options['DisableRollback']} timeout_in_minutes #{options['TimeoutInMinutes']}"
                response = cf.create_change_set(stack_name.text, options)
                @saved = true
                puts "Change Set #{response.body['Id']} Created"
              rescue
                error_message("Create Change Set failed",$!)
              end
            end
          end
        end
      end
    end
    view = FXButton.new(frame3, " &View Change Set ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    view.connect(SEL_COMMAND) do |sender, sel, data|
      if stack_name.text == nil or stack_name.text == ""
        error_message("Error","Stack Name not specified")
      elsif change_set_name.text == nil or change_set_name.text == ""
        error_message("Error","Change Set Name not specified")
      else
        save_stack(stack_name.text,change_set_name.text,cfndsl_file.text,cfndsl_parameters.text,pretty_print_json,template_file.text,parameters.text,parameter_separator.text,disable_rollback.text,timeout_in_minutes.text)
        if @saved == true
          #dialog = CF_ValidateDialog.new(@ec2_main,stack_name.text,template_file.text)
          dialog = CF_ViewChangeSetDialog.new(@ec2_main,stack_name.text, change_set_name.text)
          dialog.execute
        end
      end
    end
    execute = FXButton.new(frame3, " &Execute Change Set ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    execute.connect(SEL_COMMAND) do |sender, sel, data|
      if stack_name.text == nil or stack_name.text == ""
        error_message("Error","Stack Name not specified")
      elsif change_set_name.text == nil or change_set_name.text == ""
        error_message("Error","Change Set Name not specified")
      else
        save_stack(stack_name.text,change_set_name.text,cfndsl_file.text,cfndsl_parameters.text,pretty_print_json,template_file.text,parameters.text,parameter_separator.text,disable_rollback.text,timeout_in_minutes.text)
        if @saved == true
          answer = FXMessageBox.question(@ec2_main,MBOX_YES_NO,"Confirm Execute Change Set","Confirm Execute Change Set #{change_set_name}")
          if answer == MBOX_CLICKED_YES
            options = {}
            options['StackName'] = stack_name.text
            cf = @ec2_main.environment.cf_connection
            if cf != nil
              begin
                puts "Execute Change Set for change_set_name #{change_set_name.text} stack_name #{options['StackName']}"
                response = cf.execute_change_set(change_set_name.text, options)
                @saved = true
                @ec2_main.list.load('Stack Events','CloudFormation')
                self.handle(sender, MKUINT(ID_ACCEPT, SEL_COMMAND), nil)
              rescue
                error_message("Execute Change Set failed",$!)
              end
            end
          end
        end
      end
    end
    delete = FXButton.new(frame3, " &Delete Change Set ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    delete.connect(SEL_COMMAND) do |sender, sel, data|
      if stack_name.text == nil or stack_name.text == ""
        error_message("Error","Stack Name not specified")
      elsif change_set_name.text == nil or change_set_name.text == ""
        error_message("Error","Change Set Name not specified")
      else
        save_stack(stack_name.text,change_set_name.text,cfndsl_file.text,cfndsl_parameters.text,pretty_print_json,template_file.text,parameters.text,parameter_separator.text,disable_rollback.text,timeout_in_minutes.text)
        if @saved == true
          answer = FXMessageBox.question(@ec2_main,MBOX_YES_NO,"Confirm Delete Change Set","Confirm Delete Change Set #{change_set_name}")
          if answer == MBOX_CLICKED_YES
            options = {}
            options['StackName'] = stack_name.text
            cf = @ec2_main.environment.cf_connection
            if cf != nil
              begin
                puts "Delete Change Set for change_set_name #{change_set_name.text} stack_name #{options['StackName']}"
                response = cf.delete_change_set(change_set_name.text, options)
                @saved = true
                self.handle(sender, MKUINT(ID_ACCEPT, SEL_COMMAND), nil)
              rescue
                error_message("Delete Change Set failed",$!)
              end
            end
          end
        end
      end
    end
    exit = FXButton.new(frame3, " &Exit ", nil, self, ID_ACCEPT, FRAME_RAISED|LAYOUT_LEFT|LAYOUT_CENTER_X)
    exit.connect(SEL_COMMAND) do |sender, sel, data|
      self.handle(sender, MKUINT(ID_ACCEPT, SEL_COMMAND), nil)
    end

    if curr_item != nil and curr_item != ""
      r = get_stack(curr_item)
      if r['stack_name'] != nil and r['stack_name'] != ""
        stack_name.text = r['stack_name']
        change_set_name.text = r['change_set_name']
        cfndsl_file.text = r['cfndsl_file']
        cfndsl_parameters.text = r['cfndsl_parameters']
        if r['pretty_print_json'] == 'false'
          pretty_print_json.setCurrentItem(1)
        else
          pretty_print_json.setCurrentItem(0)
        end
        template_file.text = r['template_file']
        parameters.text = r['parameters']
        parameter_separator.text = r['parameter_separator']
        if r['disable_rollback'] != nil and r['disable_rollback'] != ""
          disable_rollback.text = r['disable_rollback']
        else
          disable_rollback.text = ""
        end
        if r['timeout_in_minutes'] != nil and r['timeout_in_minutes'] != ""
          timeout_in_minutes.text = r['timeout_in_minutes']
        else
          timeout_in_minutes.text = ""
        end
      end
    end
  end

  def get_stack(stack_name)
    folder = "cf_templates"
    properties = {}
    loc = EC2_Properties.new
    if loc != nil
      properties = loc.get(folder, stack_name)
    end
    return properties
  end

  def save_stack(stack_name,change_set_name,cfndsl_file,cfndsl_parameters,pretty_print_json,template_file,parameters,parameter_separator,disable_rollback,timeout_in_minutes)
    folder = "cf_templates"
    loc = EC2_Properties.new
    if loc != nil
      begin
        properties = {}
        properties['stack_name']=stack_name
        properties['change_set_name']=change_set_name
        properties['cfndsl_file']=cfndsl_file
        properties['cfndsl_parameters']=cfndsl_parameters
        if pretty_print_json.itemCurrent?(1)
          properties['pretty_print_json'] = 'false'
        else
          properties['pretty_print_json'] = 'true'
        end
        properties['template_file']=template_file
        properties['parameters']=parameters
        properties['parameter_separator']=parameter_separator
        if disable_rollback != nil and disable_rollback != ""
          properties['disable_rollback'] = disable_rollback
        end
        if timeout_in_minutes != nil and timeout_in_minutes != ""
          properties['timeout_in_minutes'] = timeout_in_minutes
        end
        @saved = loc.save(folder, stack_name, properties)
        if @saved == false
          error_message("Update Stack Failed","Update Stack Failed")
          return
        end
      rescue
        error_message("Update Stack Failed",$!)
        return
      end
    end
  end

  def gem_install(name,version=nil)
    puts "------>Installing #{name} #{version}....."
    begin
      cmd = "gem install  --no-ri --no-rdoc #{name}"
      cmd = cmd + " --version \"#{version}\"" if !version.nil?
      system cmd
      return true
    rescue
      puts $!
      return false
    end
  end

  def cfndsl_run(cfndsl_file, cfndsl_parameters, template_file, pretty_print_json)
    list = `gem list`
    gem_install('cfndsl') unless list.include? "cfndsl"
    puts "WARNING: If ppjson does not install set pretty print json to false" if pretty_print_json.itemCurrent?(0)
    gem_install('ppjson') unless list.include? "ppjson" if pretty_print_json.itemCurrent?(0)
    cmd="cfndsl -o #{template_file} #{cfndsl_parameters} #{cfndsl_file}"
    cmd2="ppjson -f -i #{template_file}"
    if RUBY_PLATFORM.index("mswin") != nil  or RUBY_PLATFORM.index("mingw") != nil
      c = "cmd.exe /c \@start \"#{cmd}\" #{cmd}"
      puts c
      system(c)
      if pretty_print_json.itemCurrent?(0)
        c = "cmd.exe /c \@start \"#{cmd2}\" #{cmd2}"
        puts c
        system(c)
      end
    else
      c = " #{cmd} "
      puts c
      system(c)
      puts "cfndsl #{cmd} return message #{$?}"
      if pretty_print_json.itemCurrent?(0)
        c = " #{cmd2} "
        puts c
        system(c)
        puts "ppjson #{cmd} return message #{$?}"
      end
    end
  end

  def saved
    @saved
  end

  def success
    @saved
  end

end
